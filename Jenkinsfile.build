def dockerImage = 'dockernexus101/app01'
def agents = ['amd64', 'arm64']
def generateDockerStage(arch) {
	return {
		stage("Build Docker Image for $arch") {
			node(arch) {
				script {
					version_suffix = '-' + env.BRANCH_NAME.replaceAll("[^a-zA-Z0-9]+", "")
					imgTag = "build-$version_suffix-$GIT_COMMIT"
					image = docker.build("$dockerImage:$imgTag-$arch")
				}
			}
		}
		stage("Push Docker Image for $arch") {
			node(arch) {
				script {
					withDockerRegistry(credentialsId: 'dockernexus101') {
						image.push()
					}
				}
			}
		}
	}
}
def parallelStageMap = agents.collectEntries { arch -> [arch, generateDockerStage(arch)] }

pipeline {
	agent none
    stages {
        stage('Build and push Docker Image') {
			failFast true
			steps {
				script {
					parallel parallelStageMap
				}
			}
        }

        stage('Build Docker manifest and push') {
			agent { label 'amd64' }
            steps {
				script {
					version_suffix = '-' + env.BRANCH_NAME.replaceAll("[^a-zA-Z0-9]+", "")
					imgTag = "build-$version_suffix-$GIT_COMMIT"
					withDockerRegistry(credentialsId: 'dockernexus101') {
						sh "docker manifest create $dockerImage:$imgTag"
						agents.each { arch ->
							sh "docker manifest annotate $dockerImage:$imgTag $dockerImage:$imgTag-$arch --os linux --arch $arch"
						}
						sh "docker manifest push $dockerImage:$imgTag"
					}
				}
            }
        }
    }
}
