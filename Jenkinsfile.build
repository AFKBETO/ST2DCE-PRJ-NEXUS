properties([
	parameters([
		string(name: 'dockerImage', defaultValue: 'dockernexus101/app01', description: 'Docker image repository')
	])
])

def readCurrentTag() {
	def tag = sh(returnStdout: true, script: "git --no-pager tag --points-at HEAD").trim()
	return tag
}

pipeline {
	agent { label 'arm64' }
	options {
		parallelsAlwaysFailFast()
	}
	environment {
		TAG_NAME = readCurrentTag()
	}
    stages {
		stage('Prepare variables') {
			steps {
				script {
					imgTag = ''
					if (env.BRANCH_NAME == 'main') {
						// check if the branch is main
						commit = env.GIT_COMMIT.take(7)
						imgTag = "main-${commit}"
					} else if (env.BRANCH_NAME != null) {
						branchName = env.BRANCH_NAME.replaceAll(/[^a-zA-Z0-9]+/, "")
						commit = env.GIT_COMMIT.take(7)
						imgTag = "build-${branchName}-${commit}"
					} else {
						imgTag = readCurrentTag()
						env.TAG_NAME = imgTag
					}
				}
			}
		}
        stage('Build Docker Image') {
			parallel {
				stage('Build Docker Image amd64') {
					agent { label 'amd64' }
					steps {
						script {
							imageamd64 = docker.build("${params.dockerImage}:${imgTag}-amd64", "--build-arg JAR_VERSION=${imgTag} .")
						}
					}
				}
				stage('Build Docker Image arm64') {
					agent { label 'arm64' }
					steps {
						script {
							imagearm64 = docker.build("${params.dockerImage}:${imgTag}-arm64", "--build-arg JAR_VERSION=${imgTag} .")
						}
					}
				}
			}
		}
		
		stage('Push Docker Image') {
			parallel {
				stage('Push Docker Image amd64') {
					agent { label 'amd64' }
					steps {
						script {
							withDockerRegistry(credentialsId: 'dockernexus101') {
								imageamd64.push()
							}
						}
					}
				}
				stage('Push Docker Image arm64') {
					agent { label 'arm64' }
					steps {
						script {
							withDockerRegistry(credentialsId: 'dockernexus101') {
								imagearm64.push()
							}
						}
					}
				}
			}
        }

        stage('Build Docker manifest and push') {
            steps {
				script {
					withDockerRegistry(credentialsId: 'dockernexus101') {
						sh """
							docker manifest create ${params.dockerImage}:${imgTag} ${params.dockerImage}:${imgTag}-amd64 ${params.dockerImage}:${imgTag}-arm64
							docker manifest push ${params.dockerImage}:${imgTag}
						"""
					}
				}
            }
        }

		stage('Trigger Deployment') {
			when {
				anyOf {
					branch 'main'
					expression {
						return readCurrentTag()
					}
				}
			}
			steps {
				script {
					environment = 'dev'
					if (readCurrentTag()) {
						echo 'deploying to prod'
						environment = 'prod'
					}
					build job: 'ST2DCE_Project_Nexus/Deploy', parameters: [
						string(name: 'env', value: environment),
						string(name: 'version', value: imgTag)
					],
					wait: false
				}
			}
		}
    }
}
