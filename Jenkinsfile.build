def dockerImage = 'dockernexus101/app01'
def agents = ['amd64', 'arm64']
def generateDockerStage(arch, imgTag) {
	return {
		stage("Build and push Docker Image for $arch") {
			agent { label arch }
			stages {
				stage('Build Docker Image') {
					steps {
						script {
							image = docker.build("$dockerImage:$imgTag-$arch")
						}
					}
				}
				stage('Push Docker Image') {
					steps {
						script {
							withDockerRegistry(credentialsId: 'dockernexus101') {
								image.push()
							}
						}
					}
				}
			}
		}
	}
}
def parallelStageMap(imgTag) {
	return agents.collectEntries { arch -> [arch, generateDockerStage(arch, imgTag)] }
}

pipeline {
	agent { label 'amd64' }
    stages {
		stage('Git checkout') {
			steps {
				checkout scm
				script {
					version_suffix = '-' + env.BRANCH_NAME.replaceAll("[^a-zA-Z0-9]+", "")
					env.IMAGE_TAG = "build-$version_suffix-$GIT_COMMIT"
				}
			}
		}
        stage('Build and push Docker Image') {
			steps {
				script {
					parallel parallelStageMap(env.IMAGE_TAG)
				}
			}
        }

        stage('Build Docker manifest and push') {
            steps {
				script {
					withDockerRegistry(credentialsId: 'dockernexus101') {
						sh "docker manifest create $dockerImage:$IMAGE_TAG"
						agents.each { arch ->
							sh "docker manifest annotate $dockerImage:$IMAGE_TAG $dockerImage:$IMAGE_TAG-$arch --os linux --arch $arch"
						}
						sh "docker manifest push $dockerImage:$env.IMAGE_TAG"
					}
				}
            }
        }
    }
}
